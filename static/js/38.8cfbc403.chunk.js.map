{"version":3,"sources":["library/hooks/useServerApi.js","containers/Listing/CarListing.js"],"names":["async","SuperFetch","url","method","body","authAxios","axios","create","baseURL","process","mode","headers","res","get","post","data","dataFetchReducer","state","action","type","loading","error","payload","slice","limit","total","length","Error","useServerApi","initialUrl","initialData","setUrl","useState","dispatch","useReducer","useEffect","didCancel","result","fetchData","loadMoreData","doFetch","CarListing","location","useLocation","width","useWindowSize","showMap","setShowMap","columnWidth","top","innerZ","activeClass","left","right","defaultChecked","onChange","className","link","SINGLE_POST_PAGE","totalItem","handleLoadMore","placeholder"],"mappings":"wIAAA,6BAGAA,eAAeC,EACbC,GAGC,IAFDC,EAEA,uDAFS,MACTC,EACA,uDADO,GAEP,MAAMC,EAAYC,IAAMC,OAAO,CAC7BC,QAASC,yBACTC,KAAK,UACLC,QAAS,CACP,eAAgB,sBAIpB,IAAIC,EAAM,GAKV,MAJa,OAAVT,EACDS,QAAYP,EAAUQ,IAAIX,EAAKE,GACf,QAAVD,IACNS,QAAYP,EAAUS,KAAKZ,EAAKE,IAC3BQ,EAAIG,KAGb,SAASC,EAAiBC,EAAOC,GAC/B,OAAQA,EAAOC,MACb,IAAK,aACH,MAAO,IACFF,EACHG,SAAS,EACTC,OAAO,GAEX,IAAK,gBACH,MAAO,IACFJ,EACHF,KAAMG,EAAOI,QAAQC,MAAM,EAAGN,EAAMO,OACpCC,MAAOP,EAAOI,QACdF,SAAS,EACTC,OAAO,GAEX,IAAK,gBACH,MAAO,IACFJ,EACHG,SAAS,EACTC,OAAO,GAEX,IAAK,YACH,MAAO,IACFJ,EACHF,KAAM,IACDE,EAAMF,QACNE,EAAMQ,MAAMF,MACbN,EAAMF,KAAKW,OACXT,EAAMF,KAAKW,OAAST,EAAMO,QAG9BJ,SAAS,EACTC,OAAO,GAEX,QACE,MAAM,IAAIM,OAkDDC,IA9CM,SAACC,GAAyE,IAA7D1B,EAA4D,uDAAnD,MAAOC,EAA4C,uDAArC,GAAIoB,EAAiC,uDAAzB,GAAIM,EAAqB,uDAAP,GACrF,MAAO5B,EAAK6B,GAAUC,mBAASH,IAExBZ,EAAOgB,GAAYC,qBAAWlB,EAAkB,CACrDI,SAAS,EACTC,OAAO,EACPN,KAAMe,EACNL,MAAOK,EACPN,MAAOA,IAGTW,qBAAU,KACR,IAAIC,GAAY,EAmBhB,MAjBkBpC,WAChBiC,EAAS,CAAEd,KAAM,eAEjB,IACE,MAAMkB,QAAepC,EAAWC,EAAKC,EAAQC,IACxCgC,GAAaC,EAAOtB,MACvBkB,EAAS,CAAEd,KAAM,gBAAiBG,QAASe,EAAOtB,OAEpD,MAAOM,GACFe,GACHH,EAAS,CAAEd,KAAM,oBAKvBmB,GAEO,KACLF,GAAY,KAGb,CAAClC,IACJ,MAAMqC,EAAe,KACnBN,EAAS,CAAEd,KAAM,eAEbqB,EAAWtC,IACf6B,EAAO7B,IAGT,MAAO,IAAKe,EAAOuB,UAASD,kB,sOC5Ff,SAASE,IACtB,IAAIC,EAAWC,cACf,MAAM,MAAEC,GAAUC,eACXC,EAASC,GAAcf,oBAAS,IAEjC,KAAEjB,EAAF,QAAQK,EAAR,aAAiBmB,EAAjB,MAA+Bd,EAA/B,MAAsCD,GAAUI,YAAa,mBACnE,IAAIoB,EAAc,CAAC,EAAO,GAAO,EAAI,EAAG,EAAI,EAAG,IAI3CF,IACFE,EAAc,CAAC,EAAO,GAAO,GAAO,GAAO,EAAI,IAMjD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQC,IAAK,GAAIC,OAAQ,IAAKC,YAAY,iBAA1C,SACE,cAAC,IAAD,CACEC,KACER,EAAQ,IACN,cAAC,IAAD,CAAgBF,SAAUA,IAE1B,cAAC,IAAD,CAAcA,SAAUA,IAG5BW,MACE,cAAC,IAAD,UACE,mBAAUC,gBAAgB,EAAOC,SAjBrB,KACtBR,GAAYD,IAAaA,KAgBf,4BAQR,eAAC,WAAD,WACE,cAAC,IAAD,CAAcU,UAAWZ,EAAQ,KAAOE,EAAU,SAAW,SAA7D,SACE,cAAC,IAAD,CACEW,KAAMC,IACNV,YAAaA,EACbjC,KAAMA,EACN4C,UAAWlC,EAAMC,OACjBN,QAASA,EACTI,MAAOA,EACPoC,eAAgBrB,EAChBsB,YAAa,cAAC,IAAD,QAIhBf,GAAW,cAAC,IAAD","file":"static/js/38.8cfbc403.chunk.js","sourcesContent":["import { useState, useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nasync function SuperFetch(\n  url,\n  method = 'GET',  \n  body = {}\n) {\n  const authAxios = axios.create({\n    baseURL: process.env.REACT_APP_SERVER_URL, //YOUR_API_URL HERE\n    mode:'no-cors',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  let res = {};\n  if(method == \"GET\")\n    res = await authAxios.get(url, body);\n  else if(method == \"POST\")\n    res = await authAxios.post(url, body);\n  return res.data;\n}\n\nfunction dataFetchReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return {\n        ...state,\n        loading: true,\n        error: false,\n      };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        data: action.payload.slice(0, state.limit),\n        total: action.payload,\n        loading: false,\n        error: false,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        loading: false,\n        error: true,\n      };\n    case 'LOAD_MORE':\n      return {\n        ...state,\n        data: [\n          ...state.data,\n          ...state.total.slice(\n            state.data.length,\n            state.data.length + state.limit\n          ),\n        ],\n        loading: false,\n        error: false,\n      };\n    default:\n      throw new Error();\n  }\n}\n\nconst useServerApi = (initialUrl, method = 'GET', body = {}, limit = 10, initialData = []) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    loading: false,\n    error: false,\n    data: initialData,\n    total: initialData,\n    limit: limit,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: 'FETCH_INIT' });\n\n      try {\n        const result = await SuperFetch(url, method, body);        \n        if (!didCancel && result.data) {\n          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: 'FETCH_FAILURE' });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  const loadMoreData = () => {\n    dispatch({ type: 'LOAD_MORE' });\n  };\n  const doFetch = (url) => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch, loadMoreData };\n};\n\nexport default useServerApi;\n","import React, { useState, Fragment } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport Sticky from 'react-stickynode';\nimport { Checkbox } from 'antd';\nimport useWindowSize from 'library/hooks/useWindowSize';\nimport useServerApi from 'library/hooks/useServerApi';\nimport Toolbar from 'components/UI/Toolbar/Toolbar';\nimport { PostPlaceholder } from 'components/UI/ContentLoader/ContentLoader';\nimport SectionGrid from 'components/SectionGrid/SectionGrid';\nimport FilterDrawer from './Search/MobileSearchView';\nimport CategorySearch from './Search/CategorySearch/CategorySearch';\nimport ListingMap from './ListingMap';\nimport { SINGLE_POST_PAGE } from 'settings/constant';\nimport ListingWrapper, { PostsWrapper, ShowMapCheckbox } from './Listing.style';\n\nexport default function CarListing() {\n  let location = useLocation();\n  const { width } = useWindowSize();\n  const [showMap, setShowMap] = useState(false);\n  // let url = '/data/hotel.json';\n  const { data, loading, loadMoreData, total, limit } = useServerApi('/getCollections');\n  let columnWidth = [1 / 1, 1 / 2, 1 / 3, 1 / 4, 1 / 5];\n  // if (location.search) {\n  //   url += location.search;\n  // }\n  if (showMap) {\n    columnWidth = [1 / 1, 1 / 2, 1 / 2, 1 / 2, 1 / 3];\n  }\n  const handleMapToggle = () => {\n    setShowMap((showMap) => !showMap);\n  };\n\n  return (\n    <ListingWrapper>\n      <Sticky top={82} innerZ={999} activeClass=\"isHeaderSticky\">        \n        <Toolbar\n          left={\n            width > 991 ? (\n              <CategorySearch location={location} />\n            ) : (\n              <FilterDrawer location={location} />\n            )\n          }\n          right={\n            <ShowMapCheckbox>\n              <Checkbox defaultChecked={false} onChange={handleMapToggle}>\n                Show map\n              </Checkbox>\n            </ShowMapCheckbox>\n          }\n        />\n      </Sticky>\n\n      <Fragment>\n        <PostsWrapper className={width > 767 && showMap ? 'col-12' : 'col-24'}>\n          <SectionGrid\n            link={SINGLE_POST_PAGE}\n            columnWidth={columnWidth}\n            data={data}\n            totalItem={total.length}\n            loading={loading}\n            limit={limit}\n            handleLoadMore={loadMoreData}\n            placeholder={<PostPlaceholder />}\n          />\n        </PostsWrapper>\n\n        {showMap && <ListingMap />}\n      </Fragment>\n    </ListingWrapper>\n  );\n}\n"],"sourceRoot":""}